{"version":3,"sources":["productosBD.js"],"names":["require","usuarios","db","mostrarProductos","where","get","productosSnapshot","productosList","forEach","doc","push","id","data","buscarProductoPorId","productoDoc","exists","tipo","nuevoProducto","producto","add","nuevoDoc","borrarProducto","mensaje","module","exports"],"mappings":";;;;;;;;eAAqBA,OAAO,CAAC,YAAD,C;IAApBC,Q,YAAAA,Q,EAAqC;AAE7C;;;AACA,IAAMC,EAAE,GAAGD,QAAX,C,CAEA;;AACA,SAAeE,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACoCD,EAAE,CAACE,KAAH,CAAS,MAAT,EAAiB,IAAjB,EAAuB,UAAvB,EAAmCC,GAAnC,EADpC;;AAAA;AACUC,UAAAA,iBADV;AAC+E;AACrEC,UAAAA,aAFV,GAE0B,EAF1B;AAGID,UAAAA,iBAAiB,CAACE,OAAlB,CAA0B,UAAAC,GAAG,EAAI;AAC7BF,YAAAA,aAAa,CAACG,IAAd;AAAqBC,cAAAA,EAAE,EAAEF,GAAG,CAACE;AAA7B,eAAoCF,GAAG,CAACG,IAAJ,EAApC;AACH,WAFD;AAHJ,2CAMWL,aANX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CASA;;;AACA,SAAeM,mBAAf,CAAmCF,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAC8BT,EAAE,CAACO,GAAH,CAAOE,EAAP,EAAWN,GAAX,EAD9B;;AAAA;AACUS,UAAAA,WADV;;AAAA,gBAEQ,CAACA,WAAW,CAACC,MAAb,IAAuBD,WAAW,CAACF,IAAZ,GAAmBI,IAAnB,KAA4B,UAF3D;AAAA;AAAA;AAAA;;AAAA,4CAGe,IAHf;;AAAA;AAAA;AAKaL,YAAAA,EAAE,EAAEG,WAAW,CAACH;AAL7B,aAKoCG,WAAW,CAACF,IAAZ,EALpC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAQA;;;AACA,SAAeK,aAAf,CAA6BC,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACIA,UAAAA,QAAQ,CAACF,IAAT,GAAgB,UAAhB,CADJ,CACiC;;AADjC;AAAA,0CAE2Bd,EAAE,CAACiB,GAAH,CAAOD,QAAP,CAF3B;;AAAA;AAEUE,UAAAA,QAFV;AAAA;AAGaT,YAAAA,EAAE,EAAES,QAAQ,CAACT;AAH1B,aAGiCO,QAHjC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAMA;;;AACA,SAAeG,cAAf,CAA8BV,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAC8BT,EAAE,CAACO,GAAH,CAAOE,EAAP,EAAWN,GAAX,EAD9B;;AAAA;AACUS,UAAAA,WADV;;AAAA,gBAEQ,CAACA,WAAW,CAACC,MAAb,IAAuBD,WAAW,CAACF,IAAZ,GAAmBI,IAAnB,KAA4B,UAF3D;AAAA;AAAA;AAAA;;AAAA,4CAGe;AAAEM,YAAAA,OAAO,EAAE;AAAX,WAHf;;AAAA;AAAA;AAAA,0CAKUpB,EAAE,CAACO,GAAH,CAAOE,EAAP,aALV;;AAAA;AAAA,4CAMW;AAAEW,YAAAA,OAAO,EAAE;AAAX,WANX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASAC,MAAM,CAACC,OAAP,GAAiB;AAAErB,EAAAA,gBAAgB,EAAhBA,gBAAF;AAAoBU,EAAAA,mBAAmB,EAAnBA,mBAApB;AAAyCI,EAAAA,aAAa,EAAbA,aAAzC;AAAwDI,EAAAA,cAAc,EAAdA;AAAxD,CAAjB","sourcesContent":["const { usuarios } = require('./conexion');  // La colección \"productos\" también se usa para productos\r\n\r\n// Usamos la colección principal \"productos\"\r\nconst db = usuarios;\r\n\r\n// Mostrar todos los productos\r\nasync function mostrarProductos() {\r\n    const productosSnapshot = await db.where('tipo', '==', 'producto').get();  // Filtramos por productos\r\n    const productosList = [];\r\n    productosSnapshot.forEach(doc => {\r\n        productosList.push({ id: doc.id, ...doc.data() });\r\n    });\r\n    return productosList;\r\n}\r\n\r\n// Buscar producto por ID\r\nasync function buscarProductoPorId(id) {\r\n    const productoDoc = await db.doc(id).get();\r\n    if (!productoDoc.exists || productoDoc.data().tipo !== 'producto') {\r\n        return null;\r\n    }\r\n    return { id: productoDoc.id, ...productoDoc.data() };\r\n}\r\n\r\n// Agregar un nuevo producto con nombre, precio y cantidad\r\nasync function nuevoProducto(producto) {\r\n    producto.tipo = 'producto';  // Definimos que este documento es un producto\r\n    const nuevoDoc = await db.add(producto);\r\n    return { id: nuevoDoc.id, ...producto };\r\n}\r\n\r\n// Borrar un producto por ID\r\nasync function borrarProducto(id) {\r\n    const productoDoc = await db.doc(id).get();\r\n    if (!productoDoc.exists || productoDoc.data().tipo !== 'producto') {\r\n        return { mensaje: 'Producto no encontrado' };\r\n    }\r\n    await db.doc(id).delete();\r\n    return { mensaje: 'Producto borrado correctamente' };\r\n}\r\n\r\nmodule.exports = { mostrarProductos, buscarProductoPorId, nuevoProducto, borrarProducto };"],"file":"productosBD.dev.js"}