{"version":3,"sources":["productosBD.js"],"names":["require","usuarios","db","mostrarProductos","productosSnapshot","productosList","regeneratorRuntime","async","_context","prev","next","awrap","where","get","sent","forEach","push","_objectSpread","id","doc","data","abrupt","stop","buscarProductoPorId","productoDoc","_context2","exists","tipo","producto","add","borrarProducto","_context4","mensaje","module","exports","nuevoProducto"],"mappings":"qvBAAqBA,QAAQ,cAArBC,kBAAAA,SAGFC,GAAKD,SAGX,SAAeE,mBAAf,IAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MACoCT,GAAGU,MAAM,OAAQ,KAAM,YAAYC,OADvE,KAAA,EAAA,OACUT,EADVI,EAAAM,KAEUT,EARmB,GAArBJ,EAScc,QATdd,SAAAA,GAERI,EAAAW,KAAAC,cAAA,CAAAC,GAAAC,EAAAD,IAAAC,EAAAC,WAIAZ,EAAAa,OAAA,SAMWhB,GANX,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAc,UAAA,SAAAC,oBAAAL,GAAA,IAAAM,EAAA,OAAAlB,mBAAAC,MAAA,SAAAkB,GAAA,OAAA,OAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,KAAA,EAAA,OAAAe,EAAAf,KAAA,EAAAJ,mBAAAK,MAAAT,GAAAiB,IAAAD,GAAAL,OAAA,KAAA,EAAA,IAAAW,EAAAC,EAAAX,MAAAY,QAAA,aAAAF,EAAAJ,OAAAO,KAAA,CAAAF,EAAAf,KAAA,EAAA,MAAA,OAAAe,EAAAJ,OAAA,SAAA,MAAA,KAAA,EAAA,OAAAI,EAAAJ,OAAA,SAAAJ,cAAA,CAAAC,GAAAM,EAAAN,IAAAM,EAAAJ,SAAA,KAAA,EAAA,IAAA,MAAA,OAAAK,EAAAH,UACUlB,SAAAA,cADVwB,GACUxB,IAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAqEwB,EAAAD,KAAA,WAArEvB,EAAAA,KAAAA,EAAAA,mBAAAA,MACgBF,GAF1B2B,IAAAD,IACUxB,KAAAA,EAAAA,OACAC,EADAD,EAAAA,KAAAA,EAAAA,OAAAA,SAAAA,cAAAA,CAENA,GAAAA,EAAAA,IAAkBW,IAFZX,KAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAAA,UAIL,SAFD0B,eAAAZ,GAEC,IAAAM,EAAA,OAAAlB,mBAAAC,MAAA,SAAAwB,GAAA,OAAA,OAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,KAAA,EAAA,OAAAqB,EAAArB,KAAA,EAAAJ,mBAAAK,MALLT,GAAAiB,IAAAD,GAAAL,OAKK,KAAA,EAAA,IALLW,EAKKO,EAAAjB,MAuBgBY,QAAsC,aAA5BF,EAAYJ,OAAOO,KAvB7C,CAAAI,EAAArB,KAAA,EAAA,MAAA,OAAAqB,EAAAV,OAAA,SALL,CAAAW,QAAA,2BAKK,KAAA,EAAA,OAAAD,EAAArB,KAAA,EAAAJ,mBAAAK,MALLT,GAAAiB,IAAAD,GAAA,UAKK,KAAA,EAAA,OAAAa,EAAAV,OAAA,SALL,CAAAW,QAAA,mCAKK,KAAA,EAAA,IAAA,MAAA,OAAAD,EAAAT,UALLW,OASAC,QAAA,CAAA/B,iBAAAA,iBAAAoB,oBAAAA,oBAAAY,cAAAA,cAAAL,eAAAA","file":"productosBD.min.js","sourcesContent":["const { usuarios } = require('./conexion');  // La colección \"productos\" también se usa para productos\r\n\r\n// Usamos la colección principal \"productos\"\r\nconst db = usuarios;\r\n\r\n// Mostrar todos los productos\r\nasync function mostrarProductos() {\r\n    const productosSnapshot = await db.where('tipo', '==', 'producto').get();  // Filtramos por productos\r\n    const productosList = [];\r\n    productosSnapshot.forEach(doc => {\r\n        productosList.push({ id: doc.id, ...doc.data() });\r\n    });\r\n    return productosList;\r\n}\r\n\r\n// Buscar producto por ID\r\nasync function buscarProductoPorId(id) {\r\n    const productoDoc = await db.doc(id).get();\r\n    if (!productoDoc.exists || productoDoc.data().tipo !== 'producto') {\r\n        return null;\r\n    }\r\n    return { id: productoDoc.id, ...productoDoc.data() };\r\n}\r\n\r\n// Agregar un nuevo producto con nombre, precio y cantidad\r\nasync function nuevoProducto(producto) {\r\n    producto.tipo = 'producto';  // Definimos que este documento es un producto\r\n    const nuevoDoc = await db.add(producto);\r\n    return { id: nuevoDoc.id, ...producto };\r\n}\r\n\r\n// Borrar un producto por ID\r\nasync function borrarProducto(id) {\r\n    const productoDoc = await db.doc(id).get();\r\n    if (!productoDoc.exists || productoDoc.data().tipo !== 'producto') {\r\n        return { mensaje: 'Producto no encontrado' };\r\n    }\r\n    await db.doc(id).delete();\r\n    return { mensaje: 'Producto borrado correctamente' };\r\n}\r\n\r\nmodule.exports = { mostrarProductos, buscarProductoPorId, nuevoProducto, borrarProducto };"]}