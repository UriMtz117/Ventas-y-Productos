{"version":3,"sources":["usuariosBD.js"],"names":["require","usuarios","mostrarUsuarios","get","usuariosSnapshot","usuariosList","forEach","doc","push","id","data","buscarUsuarioPorId","usuarioDoc","exists","nuevoUsuario","usuario","tipo","add","nuevoDoc","borrarUsuario","mensaje","module","exports"],"mappings":";;;;;;;;eAAqBA,OAAO,CAAC,YAAD,C;IAApBC,Q,YAAAA,Q,EAAqC;AAE7C;;;AACA,SAAeC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACmCD,QAAQ,CAACE,GAAT,EADnC;;AAAA;AACUC,UAAAA,gBADV;AACoD;AAC1CC,UAAAA,YAFV,GAEyB,EAFzB;AAGID,UAAAA,gBAAgB,CAACE,OAAjB,CAAyB,UAAAC,GAAG,EAAI;AAC5BF,YAAAA,YAAY,CAACG,IAAb;AAAoBC,cAAAA,EAAE,EAAEF,GAAG,CAACE;AAA5B,eAAmCF,GAAG,CAACG,IAAJ,EAAnC;AACH,WAFD;AAHJ,2CAMWL,YANX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CASA;;;AACA,SAAeM,kBAAf,CAAkCF,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAC6BR,QAAQ,CAACM,GAAT,CAAaE,EAAb,EAAiBN,GAAjB,EAD7B;;AAAA;AACUS,UAAAA,UADV;;AAAA,cAESA,UAAU,CAACC,MAFpB;AAAA;AAAA;AAAA;;AAAA,4CAGe,IAHf;;AAAA;AAAA;AAKaJ,YAAAA,EAAE,EAAEG,UAAU,CAACH;AAL5B,aAKmCG,UAAU,CAACF,IAAX,EALnC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAQA;;;AACA,SAAeI,YAAf,CAA4BC,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACIA,UAAAA,OAAO,CAACC,IAAR,GAAe,SAAf,CADJ,CAC+B;;AAD/B;AAAA,0CAE2Bf,QAAQ,CAACgB,GAAT,CAAaF,OAAb,CAF3B;;AAAA;AAEUG,UAAAA,QAFV;AAAA;AAGaT,YAAAA,EAAE,EAAES,QAAQ,CAACT;AAH1B,aAGiCM,OAHjC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAMA;;;AACA,SAAeI,aAAf,CAA6BV,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAC6BR,QAAQ,CAACM,GAAT,CAAaE,EAAb,EAAiBN,GAAjB,EAD7B;;AAAA;AACUS,UAAAA,UADV;;AAAA,cAESA,UAAU,CAACC,MAFpB;AAAA;AAAA;AAAA;;AAAA,4CAGe;AAAEO,YAAAA,OAAO,EAAE;AAAX,WAHf;;AAAA;AAAA;AAAA,0CAKUnB,QAAQ,CAACM,GAAT,CAAaE,EAAb,aALV;;AAAA;AAAA,4CAMW;AAAEW,YAAAA,OAAO,EAAE;AAAX,WANX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASAC,MAAM,CAACC,OAAP,GAAiB;AAAEpB,EAAAA,eAAe,EAAfA,eAAF;AAAmBS,EAAAA,kBAAkB,EAAlBA,kBAAnB;AAAuCG,EAAAA,YAAY,EAAZA,YAAvC;AAAqDK,EAAAA,aAAa,EAAbA;AAArD,CAAjB","sourcesContent":["const { usuarios } = require('./conexion');  // Asegúrate de que las conexiones están bien definidas\r\n\r\n// Mostrar todos los usuarios (filtrando por aquellos que tienen el tipo \"usuario\")\r\nasync function mostrarUsuarios() {\r\n    const usuariosSnapshot = await usuarios.get();  // Elimina el filtro para obtener todos los documentos\r\n    const usuariosList = [];\r\n    usuariosSnapshot.forEach(doc => {\r\n        usuariosList.push({ id: doc.id, ...doc.data() });\r\n    });\r\n    return usuariosList;\r\n}\r\n\r\n// Buscar un usuario por ID\r\nasync function buscarUsuarioPorId(id) {\r\n    const usuarioDoc = await usuarios.doc(id).get();\r\n    if (!usuarioDoc.exists) {  // Eliminamos la condición de \"tipo\"\r\n        return null;\r\n    }\r\n    return { id: usuarioDoc.id, ...usuarioDoc.data() };\r\n}\r\n\r\n// Agregar un nuevo usuario como un nuevo documento en la colección \"usuarios\"\r\nasync function nuevoUsuario(usuario) {\r\n    usuario.tipo = 'usuario';  // Agregamos el campo para distinguir usuarios de productos\r\n    const nuevoDoc = await usuarios.add(usuario);\r\n    return { id: nuevoDoc.id, ...usuario };\r\n}\r\n\r\n// Borrar un usuario por ID (solo si es un \"usuario\")\r\nasync function borrarUsuario(id) {\r\n    const usuarioDoc = await usuarios.doc(id).get();\r\n    if (!usuarioDoc.exists) {  // Elimina la condición de tipo\r\n        return { mensaje: 'Usuario no encontrado' };\r\n    }\r\n    await usuarios.doc(id).delete();\r\n    return { mensaje: 'Usuario borrado correctamente' };\r\n}\r\n\r\nmodule.exports = { mostrarUsuarios, buscarUsuarioPorId, nuevoUsuario, borrarUsuario };"],"file":"usuariosBD.dev.js"}