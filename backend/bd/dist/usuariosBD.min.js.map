{"version":3,"sources":["usuariosBD.js"],"names":["require","usuarios","mostrarUsuarios","usuariosSnapshot","usuariosList","regeneratorRuntime","async","_context","prev","next","awrap","get","sent","forEach","doc","push","_objectSpread","id","data","abrupt","stop","usuarioDoc","_context2","exists","nuevoUsuario","usuario","nuevoDoc","_context3","add","_context4","mensaje","module","exports","buscarUsuarioPorId","borrarUsuario"],"mappings":"qvBAAqBA,QAAQ,cAArBC,kBAAAA,SAGR,SAAeC,kBAAf,IAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MACmCT,SAASU,OAD5C,KAAA,EAAA,OACUR,EADVI,EAAAK,KAEUR,EAAe,GACrBD,EAAiBU,QAAQ,SAAAC,GACrBV,EAAaW,KAAbC,cAAA,CAAoBC,GAAIH,EAAIG,IAAOH,EAAII,WAJ/CX,EAAAY,OAAA,SAHQlB,GAGR,KAAA,EAAA,IAAA,MAAA,OAAAM,EAAAa,UAAA,SAAelB,mBAAfe,GAAA,IAAAI,EAAA,OAAAhB,mBAAAC,MAAA,SAAAgB,GAAA,OAAA,OAAAA,EAAAd,KAAAc,EAAAb,MAAA,KAAA,EAAA,OAAAa,EAAAb,KAAA,EAAAJ,mBAAAK,MAAAT,SAAAa,IAAAG,GAAAN,OAAA,KAAA,EAAA,IAAAU,EAAAC,EAAAV,MAAAW,OAAA,CAAAD,EAAAb,KAAA,EAAA,MAAA,OAAAa,EAAAH,OAAA,SAAA,MAAA,KAAA,EAAA,OAAAG,EAAAH,OAAA,SAAAH,cAAA,CAAAC,GAAAI,EAAAJ,IAAAI,EAAAH,SAAA,KAAA,EAAA,IAAA,MAAA,OAAAI,EAAAF,UAAA,SAAAI,aAAAC,GAAA,IAAAC,EAAA,OAAArB,mBAAAC,MAAA,SAAAqB,GAAA,OAAA,OAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,KAAA,EAAA,OACUN,EAAAA,KAAAA,UADVwB,EAAAlB,KAAA,EAAAJ,mBAAAK,MACoDT,SAAA2B,IAAAH,IADpD,KAAA,EAAA,OACoDC,EADpDC,EAAAf,KAAAe,EAAAR,OAAA,SAAAH,cAAA,CAEUZ,GAAAA,EAAea,IAFzBQ,IAAA,KAAA,EAAA,IAAA,MAAA,OAAAE,EAAAP,UAIQ,SAAmCN,cAAnCG,GAAA,OAAAZ,mBAAAC,MAAA,SAAAuB,GAAA,OAAA,OAAAA,EAAArB,KAAAqB,EAAApB,MAAA,KAAA,EAAA,OAAAoB,EAAApB,KAAA,EAAAJ,mBAAAK,MADJT,SAAAa,IAAAG,GAAAN,OACI,KAAA,EAAA,GAAAkB,EAAAjB,KAJRW,OAIQ,CAAAM,EAAApB,KAAA,EAAA,MAAA,OAAAoB,EAAAV,OAAA,SAyBO,CAAEW,QAAS,0BAzBlB,KAAA,EAAA,OAAAD,EAAApB,KAAA,EAAAJ,mBAAAK,MAJRT,SAAAa,IAAAG,GAAA,UAIQ,KAAA,EAAA,OAAAY,EAAAV,OAAA,SAJR,CAAAW,QAAA,kCAIQ,KAAA,EAAA,IAAA,MAAA,OAAAD,EAAAT,UAJRW,OAAAC,QAAA,CAAA9B,gBAAAA,gBAAA+B,mBAAAA,mBAAAT,aAAAA,aAAAU,cAAAA","file":"usuariosBD.min.js","sourcesContent":["const { usuarios } = require('./conexion');  // Asegúrate de que las conexiones están bien definidas\r\n\r\n// Mostrar todos los usuarios (filtrando por aquellos que tienen el tipo \"usuario\")\r\nasync function mostrarUsuarios() {\r\n    const usuariosSnapshot = await usuarios.get();  // Elimina el filtro para obtener todos los documentos\r\n    const usuariosList = [];\r\n    usuariosSnapshot.forEach(doc => {\r\n        usuariosList.push({ id: doc.id, ...doc.data() });\r\n    });\r\n    return usuariosList;\r\n}\r\n\r\n// Buscar un usuario por ID\r\nasync function buscarUsuarioPorId(id) {\r\n    const usuarioDoc = await usuarios.doc(id).get();\r\n    if (!usuarioDoc.exists) {  // Eliminamos la condición de \"tipo\"\r\n        return null;\r\n    }\r\n    return { id: usuarioDoc.id, ...usuarioDoc.data() };\r\n}\r\n\r\n// Agregar un nuevo usuario como un nuevo documento en la colección \"usuarios\"\r\nasync function nuevoUsuario(usuario) {\r\n    usuario.tipo = 'usuario';  // Agregamos el campo para distinguir usuarios de productos\r\n    const nuevoDoc = await usuarios.add(usuario);\r\n    return { id: nuevoDoc.id, ...usuario };\r\n}\r\n\r\n// Borrar un usuario por ID (solo si es un \"usuario\")\r\nasync function borrarUsuario(id) {\r\n    const usuarioDoc = await usuarios.doc(id).get();\r\n    if (!usuarioDoc.exists) {  // Elimina la condición de tipo\r\n        return { mensaje: 'Usuario no encontrado' };\r\n    }\r\n    await usuarios.doc(id).delete();\r\n    return { mensaje: 'Usuario borrado correctamente' };\r\n}\r\n\r\nmodule.exports = { mostrarUsuarios, buscarUsuarioPorId, nuevoUsuario, borrarUsuario };"]}