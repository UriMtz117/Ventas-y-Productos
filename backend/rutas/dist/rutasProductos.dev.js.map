{"version":3,"sources":["rutasProductos.js"],"names":["express","require","router","Router","get","req","res","db","collection","productosSnapshot","productos","docs","map","doc","id","data","status","json","console","error","productoId","params","log","exists","post","nuevoProducto","body","add","docRef","put","productoActualizado","Object","keys","length","update","message","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\n\r\n// Ruta para obtener todos los productos\r\nrouter.get('/', async (req, res) => {\r\n  try {\r\n    const productosSnapshot = await req.db.collection('productos').get();\r\n    const productos = productosSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n    res.status(200).json(productos);\r\n  } catch (error) {\r\n    console.error('Error al obtener productos:', error);\r\n    res.status(500).json({ error: 'Error al obtener productos' });\r\n  }\r\n});\r\n\r\n// Ruta para obtener un producto por ID\r\nrouter.get('/:id', async (req, res) => {\r\n  try {\r\n    const productoId = req.params.id;\r\n    console.log('ID recibido para obtener producto:', productoId);  // Depuración\r\n\r\n    const doc = await req.db.collection('productos').doc(productoId).get();\r\n    if (doc.exists) {\r\n      res.status(200).json({ id: doc.id, ...doc.data() });\r\n    } else {\r\n      res.status(404).json({ error: 'Producto no encontrado' });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error al obtener producto por ID:', error);\r\n    res.status(500).json({ error: 'Error al obtener producto por ID' });\r\n  }\r\n});\r\n\r\n// Ruta para agregar un nuevo producto\r\nrouter.post('/', async (req, res) => {\r\n  try {\r\n    const nuevoProducto = req.body;\r\n\r\n    // Asegúrate de que se esté accediendo a la colección correcta\r\n    const docRef = await req.db.collection('productos').add(nuevoProducto);\r\n    res.status(201).json({ id: docRef.id, ...nuevoProducto });\r\n  } catch (error) {\r\n    console.error('Error al agregar producto:', error);\r\n    res.status(500).json({ error: 'Error al agregar producto' });\r\n  }\r\n});\r\n\r\n\r\n// Ruta para actualizar un producto por ID\r\nrouter.put('/:id', async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const productoActualizado = req.body;\r\n\r\n    // Verifica que el objeto de actualización no esté vacío\r\n    if (Object.keys(productoActualizado).length === 0) {\r\n      return res.status(400).json({ error: 'El objeto de actualización no puede estar vacío' });\r\n    }\r\n\r\n    // Actualiza el producto en la colección de Firebase\r\n    await req.db.collection('productos').doc(id).update(productoActualizado);\r\n    res.status(200).json({ message: 'Producto actualizado correctamente' });\r\n  } catch (error) {\r\n    console.error('Error al actualizar producto:', error);\r\n    res.status(500).json({ error: 'Error al actualizar producto' });\r\n  }\r\n});\r\n\r\n// Ruta para eliminar un producto por ID\r\nrouter.delete('/:id', async (req, res) => {\r\n  try {\r\n    const productoId = req.params.id;\r\n    console.log('ID recibido para eliminar producto:', productoId);  // Depuración\r\n\r\n    await req.db.collection('productos').doc(productoId).delete();\r\n    res.status(200).json({ message: 'Producto eliminado correctamente' });\r\n  } catch (error) {\r\n    console.error('Error al eliminar producto:', error);\r\n    res.status(500).json({ error: 'Error al eliminar producto' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"file":"rutasProductos.dev.js"}