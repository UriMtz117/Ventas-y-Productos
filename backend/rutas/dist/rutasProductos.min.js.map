{"version":3,"sources":["rutasProductos.js"],"names":["express","require","router","Router","get","req","res","productosSnapshot","productos","regeneratorRuntime","async","_context","prev","next","awrap","db","collection","sent","docs","map","doc","_objectSpread","id","data","t0","error","status","json","stop","productoId","_context2","params","console","log","exists","post","nuevoProducto","docRef","_context3","body","add","productoActualizado","_context4","Object","keys","length","abrupt","message","_context5"],"mappings":"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","file":"rutasProductos.min.js","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\n\r\n// Ruta para obtener todos los productos\r\nrouter.get('/', async (req, res) => {\r\n  try {\r\n    const productosSnapshot = await req.db.collection('productos').get();\r\n    const productos = productosSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n    res.status(200).json(productos);\r\n  } catch (error) {\r\n    console.error('Error al obtener productos:', error);\r\n    res.status(500).json({ error: 'Error al obtener productos' });\r\n  }\r\n});\r\n\r\n// Ruta para obtener un producto por ID\r\nrouter.get('/:id', async (req, res) => {\r\n  try {\r\n    const productoId = req.params.id;\r\n    console.log('ID recibido para obtener producto:', productoId);  // Depuración\r\n\r\n    const doc = await req.db.collection('productos').doc(productoId).get();\r\n    if (doc.exists) {\r\n      res.status(200).json({ id: doc.id, ...doc.data() });\r\n    } else {\r\n      res.status(404).json({ error: 'Producto no encontrado' });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error al obtener producto por ID:', error);\r\n    res.status(500).json({ error: 'Error al obtener producto por ID' });\r\n  }\r\n});\r\n\r\n// Ruta para agregar un nuevo producto\r\nrouter.post('/', async (req, res) => {\r\n  try {\r\n    const nuevoProducto = req.body;\r\n\r\n    // Asegúrate de que se esté accediendo a la colección correcta\r\n    const docRef = await req.db.collection('productos').add(nuevoProducto);\r\n    res.status(201).json({ id: docRef.id, ...nuevoProducto });\r\n  } catch (error) {\r\n    console.error('Error al agregar producto:', error);\r\n    res.status(500).json({ error: 'Error al agregar producto' });\r\n  }\r\n});\r\n\r\n\r\n// Ruta para actualizar un producto por ID\r\nrouter.put('/:id', async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const productoActualizado = req.body;\r\n\r\n    // Verifica que el objeto de actualización no esté vacío\r\n    if (Object.keys(productoActualizado).length === 0) {\r\n      return res.status(400).json({ error: 'El objeto de actualización no puede estar vacío' });\r\n    }\r\n\r\n    // Actualiza el producto en la colección de Firebase\r\n    await req.db.collection('productos').doc(id).update(productoActualizado);\r\n    res.status(200).json({ message: 'Producto actualizado correctamente' });\r\n  } catch (error) {\r\n    console.error('Error al actualizar producto:', error);\r\n    res.status(500).json({ error: 'Error al actualizar producto' });\r\n  }\r\n});\r\n\r\n// Ruta para eliminar un producto por ID\r\nrouter.delete('/:id', async (req, res) => {\r\n  try {\r\n    const productoId = req.params.id;\r\n    console.log('ID recibido para eliminar producto:', productoId);  // Depuración\r\n\r\n    await req.db.collection('productos').doc(productoId).delete();\r\n    res.status(200).json({ message: 'Producto eliminado correctamente' });\r\n  } catch (error) {\r\n    console.error('Error al eliminar producto:', error);\r\n    res.status(500).json({ error: 'Error al eliminar producto' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"]}