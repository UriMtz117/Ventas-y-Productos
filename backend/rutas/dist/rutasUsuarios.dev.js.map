{"version":3,"sources":["rutasUsuarios.js"],"names":["express","require","router","Router","get","req","res","db","collection","usuariosSnapshot","usuarios","docs","map","doc","id","data","status","json","console","error","params","exists","post","nuevoUsuario","body","add","docRef","message","put","actualizarUsuario","Object","keys","length","usuarioRef","usuarioDoc","update","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\n\r\n// Ruta para obtener todos los usuarios desde `miejemploBD`\r\nrouter.get('/', async (req, res) => {\r\n  try {\r\n    const usuariosSnapshot = await req.db.collection('miejemploBD').get();\r\n    const usuarios = usuariosSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n    res.status(200).json(usuarios);  // Envía la lista de usuarios en formato JSON\r\n  } catch (error) {\r\n    console.error('Error al obtener usuarios desde `miejemploBD`:', error);\r\n    res.status(500).json({ error: 'Error al obtener usuarios' });\r\n  }\r\n});\r\n\r\n// Ruta para obtener un usuario por ID desde `miejemploBD`\r\nrouter.get('/:id', async (req, res) => {\r\n  try {\r\n    const doc = await req.db.collection('miejemploBD').doc(req.params.id).get();\r\n    if (doc.exists) {\r\n      res.status(200).json({ id: doc.id, ...doc.data() });\r\n    } else {\r\n      res.status(404).json({ error: 'Usuario no encontrado' });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error al obtener usuario por ID desde `miejemploBD`:', error);\r\n    res.status(500).json({ error: 'Error al obtener usuario por ID' });\r\n  }\r\n});\r\n\r\n// Ruta para agregar un nuevo usuario a `miejemploBD`\r\nrouter.post('/', async (req, res) => {\r\n  try {\r\n    const nuevoUsuario = req.body;\r\n    const docRef = await req.db.collection('miejemploBD').add(nuevoUsuario);\r\n    res.status(201).json({ id: docRef.id, ...nuevoUsuario });\r\n  } catch (error) {\r\n    console.error('Error al agregar usuario a `miejemploBD`:', error);\r\n    res.status(500).json({ error: 'Error al agregar usuario' });\r\n  }\r\n});\r\n\r\n// Ruta para eliminar un usuario por ID en `miejemploBD`\r\nrouter.delete('/:id', async (req, res) => {\r\n  try {\r\n    await req.db.collection('miejemploBD').doc(req.params.id).delete();\r\n    res.status(200).json({ message: 'Usuario eliminado correctamente' });\r\n  } catch (error) {\r\n    console.error('Error al eliminar usuario desde `miejemploBD`:', error);\r\n    res.status(500).json({ error: 'Error al eliminar usuario' });\r\n  }\r\n});\r\n\r\n// Ruta para actualizar un usuario por ID en `miejemploBD`\r\nrouter.put('/:id', async (req, res) => {\r\n  try {\r\n    const actualizarUsuario = req.body;\r\n\r\n    // Verifica que el objeto no esté vacío\r\n    if (Object.keys(actualizarUsuario).length === 0) {\r\n      return res.status(400).json({ error: 'El objeto de actualización no puede estar vacío' });\r\n    }\r\n\r\n    const usuarioRef = req.db.collection('miejemploBD').doc(req.params.id);\r\n\r\n    // Verifica si el documento existe antes de intentar actualizarlo\r\n    const usuarioDoc = await usuarioRef.get();\r\n    if (!usuarioDoc.exists) {\r\n      return res.status(404).json({ error: 'Usuario no encontrado' });\r\n    }\r\n\r\n    // Realiza la actualización\r\n    await usuarioRef.update(actualizarUsuario);\r\n    res.status(200).json({ message: 'Usuario actualizado correctamente' });\r\n  } catch (error) {\r\n    console.error('Error al actualizar usuario en `miejemploBD`:', error);\r\n    res.status(500).json({ error: 'Error al actualizar usuario' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;"],"file":"rutasUsuarios.dev.js"}