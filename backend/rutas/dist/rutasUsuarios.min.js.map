{"version":3,"sources":["rutasUsuarios.js"],"names":["express","require","router","Router","get","req","res","usuariosSnapshot","usuarios","regeneratorRuntime","async","_context","prev","next","awrap","db","collection","sent","docs","map","doc","_objectSpread","id","data","t0","error","status","json","stop","_context2","params","exists","console","post","nuevoUsuario","docRef","_context3","body","add","_context4","message","put","actualizarUsuario","usuarioRef","_context5","Object","keys","length","abrupt","update"],"mappings":"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","file":"rutasUsuarios.min.js","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\n\r\n// Ruta para obtener todos los usuarios desde `miejemploBD`\r\nrouter.get('/', async (req, res) => {\r\n  try {\r\n    const usuariosSnapshot = await req.db.collection('miejemploBD').get();\r\n    const usuarios = usuariosSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n    res.status(200).json(usuarios);  // Envía la lista de usuarios en formato JSON\r\n  } catch (error) {\r\n    console.error('Error al obtener usuarios desde `miejemploBD`:', error);\r\n    res.status(500).json({ error: 'Error al obtener usuarios' });\r\n  }\r\n});\r\n\r\n// Ruta para obtener un usuario por ID desde `miejemploBD`\r\nrouter.get('/:id', async (req, res) => {\r\n  try {\r\n    const doc = await req.db.collection('miejemploBD').doc(req.params.id).get();\r\n    if (doc.exists) {\r\n      res.status(200).json({ id: doc.id, ...doc.data() });\r\n    } else {\r\n      res.status(404).json({ error: 'Usuario no encontrado' });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error al obtener usuario por ID desde `miejemploBD`:', error);\r\n    res.status(500).json({ error: 'Error al obtener usuario por ID' });\r\n  }\r\n});\r\n\r\n// Ruta para agregar un nuevo usuario a `miejemploBD`\r\nrouter.post('/', async (req, res) => {\r\n  try {\r\n    const nuevoUsuario = req.body;\r\n    const docRef = await req.db.collection('miejemploBD').add(nuevoUsuario);\r\n    res.status(201).json({ id: docRef.id, ...nuevoUsuario });\r\n  } catch (error) {\r\n    console.error('Error al agregar usuario a `miejemploBD`:', error);\r\n    res.status(500).json({ error: 'Error al agregar usuario' });\r\n  }\r\n});\r\n\r\n// Ruta para eliminar un usuario por ID en `miejemploBD`\r\nrouter.delete('/:id', async (req, res) => {\r\n  try {\r\n    await req.db.collection('miejemploBD').doc(req.params.id).delete();\r\n    res.status(200).json({ message: 'Usuario eliminado correctamente' });\r\n  } catch (error) {\r\n    console.error('Error al eliminar usuario desde `miejemploBD`:', error);\r\n    res.status(500).json({ error: 'Error al eliminar usuario' });\r\n  }\r\n});\r\n\r\n// Ruta para actualizar un usuario por ID en `miejemploBD`\r\nrouter.put('/:id', async (req, res) => {\r\n  try {\r\n    const actualizarUsuario = req.body;\r\n\r\n    // Verifica que el objeto no esté vacío\r\n    if (Object.keys(actualizarUsuario).length === 0) {\r\n      return res.status(400).json({ error: 'El objeto de actualización no puede estar vacío' });\r\n    }\r\n\r\n    const usuarioRef = req.db.collection('miejemploBD').doc(req.params.id);\r\n\r\n    // Verifica si el documento existe antes de intentar actualizarlo\r\n    const usuarioDoc = await usuarioRef.get();\r\n    if (!usuarioDoc.exists) {\r\n      return res.status(404).json({ error: 'Usuario no encontrado' });\r\n    }\r\n\r\n    // Realiza la actualización\r\n    await usuarioRef.update(actualizarUsuario);\r\n    res.status(200).json({ message: 'Usuario actualizado correctamente' });\r\n  } catch (error) {\r\n    console.error('Error al actualizar usuario en `miejemploBD`:', error);\r\n    res.status(500).json({ error: 'Error al actualizar usuario' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;"]}