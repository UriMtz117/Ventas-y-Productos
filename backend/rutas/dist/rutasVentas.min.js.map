{"version":3,"sources":["rutasVentas.js"],"names":["express","require","router","Router","get","req","res","ventasSnapshot","ventas","regeneratorRuntime","async","_context","prev","next","awrap","db","collection","sent","docs","map","doc","_objectSpread","id","data","t0","error","status","json","stop","_context2","params","exists","console","post","nuevaVenta","docRef","_context3","body","add","put","actualizarVenta","_context4","Object","keys","length","abrupt","update","message","_context5"],"mappings":"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","file":"rutasVentas.min.js","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\n\r\n// Ruta para obtener todas las ventas\r\nrouter.get('/', async (req, res) => {\r\n  try {\r\n    const ventasSnapshot = await req.db.collection('Ventas').get();\r\n    const ventas = ventasSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n    res.status(200).json(ventas);\r\n  } catch (error) {\r\n    console.error('Error al obtener ventas:', error);\r\n    res.status(500).json({ error: 'Error al obtener ventas' });\r\n  }\r\n});\r\n\r\n// Ruta para obtener una venta por ID\r\nrouter.get('/:id', async (req, res) => {\r\n  try {\r\n    const doc = await req.db.collection('Ventas').doc(req.params.id).get();\r\n    if (doc.exists) {\r\n      res.status(200).json({ id: doc.id, ...doc.data() });\r\n    } else {\r\n      res.status(404).json({ error: 'Venta no encontrada' });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error al obtener venta por ID:', error);\r\n    res.status(500).json({ error: 'Error al obtener venta por ID' });\r\n  }\r\n});\r\n\r\n// Ruta para agregar una nueva venta\r\nrouter.post('/', async (req, res) => {\r\n  try {\r\n    const nuevaVenta = req.body;\r\n    const docRef = await req.db.collection('Ventas').add(nuevaVenta);\r\n    res.status(201).json({ id: docRef.id, ...nuevaVenta });\r\n  } catch (error) {\r\n    console.error('Error al agregar venta:', error);\r\n    res.status(500).json({ error: 'Error al agregar venta' });\r\n  }\r\n});\r\n\r\n// Ruta para actualizar una venta por ID\r\nrouter.put('/:id', async (req, res) => {\r\n  try {\r\n    const actualizarVenta = req.body;\r\n    if (Object.keys(actualizarVenta).length === 0) {\r\n      return res.status(400).json({ error: 'El objeto de actualización no puede estar vacío' });\r\n    }\r\n    await req.db.collection('Ventas').doc(req.params.id).update(actualizarVenta);\r\n    res.status(200).json({ message: 'Venta actualizada correctamente' });\r\n  } catch (error) {\r\n    console.error('Error al actualizar venta:', error);\r\n    res.status(500).json({ error: 'Error al actualizar venta' });\r\n  }\r\n});\r\n\r\n// Ruta para eliminar una venta por ID\r\nrouter.delete('/:id', async (req, res) => {\r\n  try {\r\n    await req.db.collection('Ventas').doc(req.params.id).delete();\r\n    res.status(200).json({ message: 'Venta eliminada correctamente' });\r\n  } catch (error) {\r\n    console.error('Error al eliminar venta:', error);\r\n    res.status(500).json({ error: 'Error al eliminar venta' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"]}